//! account: dummy-prevents-genesis-reload, 100000 ,0, validator
//! account: alice, 10000000GAS

// Alice Submit VDF Proof
//! new-transaction
//! sender: alice
script {
use 0x0::MinerState;
use 0x0::Debug;
use 0x0::Transaction;

// SIMULATES A MINER ONBOARDING PROOF (block_0.json)
fun main(sender: &signer) {
    let difficulty = 2400000;
    let challenge = x"3dfca19b9914d78ec0c3d04c486e7baa402e9aaf54ca8c39bab641b0c9829070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006578706572696d656e74616c009f
    // Generate solutions with cd ./verfiable-delay/ cargo run -- -l=4096 aa 100
    // the -l=4096 is important because this is the security paramater of 0L miner.
    let solution = x"0053e7419eb01e955666d49a25912dd82f4d3d627aededf01478bcef332f2d68fd6238e3cc4636af163c72be8aaf65a7093a70d74d06342115b3d29f50a6eb51f310595cc7a0e2872d4cd6ecfee18020d5cde01fe8bccb451c61bd00c0932fc64e6048e3ad7b458d6250c8881af5a58a3aa42200dcd13681883bb0019e3dfa782300ef8dc00c1f83cb7fbee581a277cf8a6c9535fd5847697325c0db526d4ff1ddf7282eac92de127fbb071f49f3abb54f0c98ea6383b3764fc0dfc1b9cba71be6cda2e927882bd56cf2985db15bfa3c9117982ef97fc415ba9805b731d313b49cb53935fb6c02c91d1a2f6ebe19ef720f1e0178fa31eecdb3e1609710ea583e28004bd6683777eee6278c773a8aa2db640deee384f1304aebd09de4837c4e76ce362e2060770790b2c6f57daa263e1638dccff310cce683c7b5d86353c8550a97ee8c91142f51f0b815d4dd9fe23fd062163427523b3c45ac947edf6189ce75bbd7d07a424a7cf925a1cf7a3f9c7a46fa6eba1ab7cbc6020b9dffbf11aa14f68f74ba50576be7374ef0173caa4f4f366255467af0ec0e73b6133c572c068db9d8c8bcb54fbb3cd5e7786480e166d6e764cf719cb134d6512995150fd5b2be7189f709cf5482379edb1907b553962909f940729d48d570240c67b298c2b64d0397437880c1df3d0331811420086eed1da3fc88a43d7baf2c3f75106b78c57bb4a393002da59a4f3e1ea4fc75cc9028451f0750d6a9aabee14334c12b58bb07280287cf3454ac3c2a42c4f0f6489a253613eb13d55f2d1f5f9fd63da3c3daf75a700f3a5775914c395413696fbd967f577ad8bd0c0b91106546594c68f9fe91161c1ec7afe7275e2dc4f7d0a286f943ec41d221a020a73d586ef4731e615f6f3276382111405af6192bab0fe8c577b368543b8232614180ba5042bda4330c1e293454bfca309e22a5d33d5a97f0c1d1c2f60ad41f07254cab13a9c4c526301afe374220c3b1cb3dcaa901373a410ee9b7fc0c05a07dd8e09c700166765430fec25b286290d39e6b65b47cab5bfce98994d844b92c164702f6493b6fe9971afa91697f83001de859c1a0220ec3ebabc9551c32e795650650592694a258e63523377025c7593676e457e604025023c2676ff4198ecffa107c8c433b0f41de1944f7d8c56d37cda3ee3f446d14d379329ecbbf09b51ba4e81803388cabee334a2bb55b1336ae5a7fb80f296e03deaeac4f373d0c509c75fc946159e88c2f9251f8d25913631f49a9b1c9f0fb2580baa3aa33d0d9c6e43460a072075c30286155bbe5bc838850697afc23bf6d048913153c34b596f821db3613ae4bcaf13c50f0c32dbbd60dc83b17376265f5792594fbcfb4cd18e9acf77d6869866585fd723e182d6e75e48ba3c53e7311c8e154e8fd864b6f13ca31748447b6a33ed6822c015e21baad76b7";
    let reported_tower_height = 0;

    // return solution
    let proof = MinerState::create_proof_blob(challenge, difficulty, solution, reported_tower_height);
    MinerState::commit_state(sender, proof);

    let verified_tower_height_after = MinerState::get_miner_tower_height({{alice}});
    // Debug::print(&verified_tower_height_after);
    Debug::print(&verified_tower_height_after);

    Transaction::assert(verified_tower_height_after == reported_tower_height, 10008001);



}
}
// check: EXECUTED


//! new-transaction
//! sender: alice
script {
use 0x0::MinerState;
use 0x0::Debug;
// use 0x0::Globals;
// use 0x0::Transaction;

// SIMULATES THE SECOND PROOF OF THE MINER (block_1.json)
fun main(sender: &signer) {
    let difficulty = 2400000;

    // Generate solutions with cd ./verfiable-delay/ cargo run -- -l=4096 aa 100
    // the -l=4096 is important because this is the security paramater of 0L miner.
    let challenge = x"a0f9e7a5483616060676b3937b1afdd4eae29adb9762391b066c4e3b48770f1f";

    let solution = x"0042f825f7a9471eef2adbfac1e43141106739d18a613d7493f6844d1f72b4bf9fb3b6c2a028e51468776d2c8d9c81ae96e3ef9a895b0be36521d5d80a9a28f4194d32b1692e99afb9c2c3c32a3937a79c8a9ec3bb87b104fd19bc1fc56574551eec24c0c1d94d4bdb63db208712338f987e5fb904da0af1f698a361ad06781885be7dc71048fc137cc7ec6276306ff7a9f0e37cee05c4e74a8e9a0fc61ffb09737dbe613a1cdfd83bd48426be9db75067b1008226e2cb393da0129355095aeacceaa5fb67974f82294d88399c234b414e41586ac71229a214057ca147e1dd80fb2fac38d15fce07fced0896e116ab6226ac70f3109ac3a88c3df38f6279a565f2ffd90ee20d2ff04778ea7a818bc1b6134d121a7701724fe525e2f3dcfbf9d1f0dcd97034f8c7a71a3b91e95f3a63d8c97bdbf3f970156dffb767278af20af51efeec80117474b29a704a38aa5a76412000cbb31c9143446b5319bae841084c7ad03c3aa1455d42ed57842b0f9b1abb81a262d855969340916df435fb7108629d1e9a3d49a9c5a84003d05087b5961a5552be15e81d58ee80f068a00636585a139dd58ddcde568f5253ceb31a1b1248e4897e2ae459fd8d232d0c8ff688c90f509cc413e3ffc55a3764ab2a80ce67c012296a1337141df0a47daa86f957b769cff6ad26d8685c43fa0a14c678d7e1875ddd15df3c0bf463c81fc330c71f173dbc2900388f9d8df24781b0b7404318a938a6f7a2dc2e8e92d1224ac410fe36af338e27f57d2efb06cfba995ec5a0c23cdf8d2e889988294b58f9507faa5c758f25f612f85e70f6754ff0f4539b2198bcde603b5a5fe0adc51719f8584214657ef78b95e7cd3a1dbf9ea01102402171588d6c80f617b2cb521e533c4abacac46766df58381bce43a56ee8682297b44367a046d5a934c2838d7bead395e9418df1c63b47eb958bdaab50b898ed2ac717d0b2476f1621661d9557e1b70f15cfde15cad4a15268ff7e57edb0b1e2339f264c5226b411cdd9bdcb002f59922fdf9aa1cd38056b0fe69fbdc639201f234f99949118c4bedeb8ea912f382bd0382c032c7551a1ffeba2f9f30a41c062d563e5bbdf961c7c9cc49ee618601003457b09e5e0de3ae01a23f3c8e8356a3dd73d9c0214c31a79c011d832f94176c45aff9035090f7246e157887180ca4be90fcf3e1f6d7a902f20b73401187949a78b3e58d6e7fa01caaea98836237a7a53c52308c8b91728c9ada6acfe83d796b427511c37f11d66a65c15779e35a7db06faed5bb0c8d2c5444107074741d09e46aa004c02376b619fb84ef9c591ffd4209027dbfea4dd0070a8f7c2f4b5baa09da23e118e0e680b7fb571d6642fe4604656d6ebd0dfa6e7d89187ba87f929b8b606c8c1eec7f0f11049ad648684a93d84c74336678bf0acb8884112301e66e9b06828b8dda061871f";
    let reported_tower_height = 1;

    // return solution
    let proof = MinerState::create_proof_blob(challenge, difficulty, solution, reported_tower_height);
    MinerState::commit_state(sender, proof);

    let verified_tower_height_after = MinerState::get_miner_tower_height({{alice}});
    Debug::print(&verified_tower_height_after);

    // Transaction::assert(verified_tower_height_after == reported_tower_height, 10008001);


}
}
// check: ABORTED
