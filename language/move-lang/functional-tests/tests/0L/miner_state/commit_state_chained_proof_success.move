//! account: dummy-prevents-genesis-reload, 100000 ,0, validator
//! account: alice, 10000000GAS

// Alice Submit VDF Proof
//! new-transaction
//! sender: alice
script {
use 0x0::MinerState;
use 0x0::Debug;
use 0x0::Transaction;

fun main(sender: &signer) {
    let difficulty = 100;
    let challenge = x"aa";
    // Generate solutions with cd ./verfiable-delay/ cargo run -- -l=4096 aa 100
    // the -l=4096 is important because this is the security paramater of 0L miner.
    let solution = x"002fb6ae7221c8593fb21599fdbee8837426761b328f76609295c9175d5f061bb29792236d22366d0d9305040661b54f59cea3f8e143a584f178981549b462bdc96a3ef270dc1457985390a3401c484b721fdd00f0330b894755d34a311c547b73065aec1a71528d0dc350c13fa68aaf34d206a5fa56f7391b889f1226d7aacc3624eca7f27d523db4f2f18e4ca0bd4cd91b4133cce16b40245d9d393a0c32013f91c5d2bfaca7e5e4c4f71ea90bdc9047657e02e7a429b3f4988b3a7f0789a6c4e0b60af26139dba0c5a83eecc785dbdde0012e47ef3af7fe60e366b8e87ac437da111c8ffb57f400980513b47db04c47787380ea564ffaf1653aa5889e5b31340022cfdd5956cf2fc9130ea4e45a700a5fbd990aae8a4643b22508b6d0b6b80186b5eea2c656296ad2d2043867bd93d48a284b90c2792aeeb25f6a7f0dacac617e7660074e18109e6675480ebc6340f4b01d74d8e5943b9bc8f9acdb3d8ebef5f593858913ebbc2f0d4b1fc76dacca4b032bb8d97e018a614e667bbbb07da891d23028b60275bc2c715e975b347c2e72e5753282959973f34742a43393d76b025b6444e4cabf4272eceae3d94a19ae1f24edf725e8892eb45f34e8a224a5ee56effa8f4b5a3a3bf810579cba99f0e954ce8459afe963bbb2c2578bd5de48e6df56a29ef03dda9e03e19c08fed8b467065afd38720f634c646698a1841c4a
    let reported_tower_height = 0;

    // return solution
    let proof = MinerState::create_proof_blob(challenge, difficulty, solution, reported_tower_height);
    MinerState::commit_state(sender, proof);

    let verified_tower_height_after = MinerState::get_miner_tower_height({{alice}});
    // Debug::print(&verified_tower_height_after);
    Debug::print(&verified_tower_height_after);

    Transaction::assert(verified_tower_height_after == reported_tower_height, 10008001);



}
}
// check: EXECUTED


//! new-transaction
//! sender: alice
script {
use 0x0::MinerState;
use 0x0::Debug;
use 0x0::Globals;
// use 0x0::Transaction;

fun main(sender: &signer) {
    let difficulty = Globals::get_difficulty();

    // Generate solutions with cd ./verfiable-delay/ cargo run -- -l=4096 aa 100
    // the -l=4096 is important because this is the security paramater of 0L miner.
    let challenge = x"65c91b90421bee9187417079142e69af67ce885a2f506aa061444cadb5064437";

    let solution = x"0020fb7ab75e252582092c9be7cb638a488bc91d97b34bd481c2d221a98596126a13ef37c580d500e01e7038f3d32978c395884dc9ffa4fc54080f21ef45f2897ca76a6568ab516db6803bfc410568c7f00237d2109447618eb387b89f540eba2b58dd64baf289a76483019d90e2c2f86d0a57710b5d48f3186a6a31de30e3effee6455e4517c853db9f039f0a0a127126a29a861e60124e01aa30593f82cdf6357189b27e25eccb180e67602aadedbe13670c9d14d5c5e5cde5c95d057ba17de6f6c00f3bccde5f8dad9edb23050a334f6f211a61fd2530e01fcea528f673bea57ec8c27b7bbf4e7c3afb2cb4410aa15fd3069af343e3947798262a90a2406a6a001cea78fe9ad6e83a4d90b8c051a6e00708601de16c726716aa3e09211312ecaa9b7d20462d5fee97451ee6199e5f8d1d609bd62a0153dbb15f0e907aff8a47a5a6b8b9670e938b05582908736acdd131c641c964b652d93a0ef44488fb5264c0b2288d0588c573d39e47e77cbb63a33e8f473257d2e4440ee6fff2992ba7cf4b39af6c8fa8b01754e6ac970c844032ff9a3d20d8db547d76ca87a9a6530c11a86a30db09db8ecacec982c1fcd5425f935b015246414a42802616f7adb0394e101f87185d9763990791bf97d18a6d8b21cd618cdd84b628eed74d134261f810a445a4af58eec4330e23f786293a0bcc0f932ca4c4bb5656a7bc361954a5d93f
    let reported_tower_height = 1;

    // return solution
    let proof = MinerState::create_proof_blob(challenge, difficulty, solution, reported_tower_height);
    MinerState::commit_state(sender, proof);

    let verified_tower_height_after = MinerState::get_miner_tower_height({{alice}});
    Debug::print(&verified_tower_height_after);

    // Transaction::assert(verified_tower_height_after == reported_tower_height, 10008001);


}
}
// check: EXECUTED
