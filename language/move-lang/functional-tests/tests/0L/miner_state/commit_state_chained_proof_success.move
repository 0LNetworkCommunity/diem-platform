//! account: dummy-prevents-genesis-reload, 100000 ,0, validator
//! account: alice, 10000000GAS

// Alice Submit VDF Proof
//! new-transaction
//! sender: alice
script {
use 0x0::MinerState;
use 0x0::Debug;
use 0x0::Transaction;

// SIMULATES A MINER ONBOARDING PROOF (block_0.json)
fun main(sender: &signer) {
    let difficulty = 100;
    let challenge = x"1796824cdcc3ab205c25f260e15dc6705942d356f114089d4a46f2f3b0b15b52000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000304c20746573746ef74657374732072616765206163726f737320746865206e6174696f6e";
    // Generate solutions with cd ./verfiable-delay/ cargo run -- -l=4096 aa 100
    // the -l=4096 is important because this is the security paramater of 0L miner.
    let solution = x"004102e5a40aa610d88964f2fb650511370811440577cd4cd643321f494accd05e10f5183cdb155b98f519e24619fd12a06bb12d9377c03998cb2f06a2b88485b2fc33704f632f518a7b821500cf5c6ee4e3748768af0ca25240f02041845e0d74975d82e6679996244d3bb41c0c36b520eea0ad11918ec44bff83a392d2e4fb7bc5c022275fc4ba242fa4c2503756a004ab262aeda9fac49b92521e2d6a96ab3b9d2fc0c3906da8ba3e87f4b249f81e9dc8cc879019bdffa716a878c9c73ea406fc60597b29f3f503cd9d293017a37cdec80b30f8bd95c6f1a67b7e1afe97a1f7fb4eed3a1e56cbf13c7f034c5373849008df4c6dafd92df0de5421b123a5839800087a8004a1a0e78ca4e0aa50760bc77e8dd00526aed9fa272541f1476ae5476bd520c72694ded1de34a672bdca451e8809d15d98910921e28ee313186e77726a428204672f66b873f35463d78570f126329c0541a5c1af1fb18b429be150fd1de9498d18717b09178a41aa15fd6fa8d7b6737d730fe87ef4ab875ec2459f8b97c604fc6f999d2c1df563e550ba247e5d7318319fcb0c22e39a3bc2d8b782d8fad912652fc151a99af0f4a28311050d77d75a1651d08d7a45676238765bab161c15648c4dd601eab92d169702f5a951b332845e87942ea48b453c177c51fa73e64d67544857f69d342ecd0ebf1e73ed57d7de1f780a9f01ceaa95b586f60ba2a
    let reported_tower_height = 0;

    // return solution
    let proof = MinerState::create_proof_blob(challenge, difficulty, solution, reported_tower_height);
    MinerState::commit_state(sender, proof);

    let verified_tower_height_after = MinerState::get_miner_tower_height({{alice}});
    // Debug::print(&verified_tower_height_after);
    Debug::print(&verified_tower_height_after);

    Transaction::assert(verified_tower_height_after == reported_tower_height, 10008001);



}
}
// check: EXECUTED


//! new-transaction
//! sender: alice
script {
use 0x0::MinerState;
use 0x0::Debug;
use 0x0::Globals;
// use 0x0::Transaction;

// SIMULATES THE SECOND PROOF OF THE MINER (block_1.json)
fun main(sender: &signer) {
    let difficulty = Globals::get_difficulty();

    // Generate solutions with cd ./verfiable-delay/ cargo run -- -l=4096 aa 100
    // the -l=4096 is important because this is the security paramater of 0L miner.
    let challenge = x"a0f9e7a5483616060676b3937b1afdd4eae29adb9762391b066c4e3b48770f1f";

    let solution = x"0042f825f7a9471eef2adbfac1e43141106739d18a613d7493f6844d1f72b4bf9fb3b6c2a028e51468776d2c8d9c81ae96e3ef9a895b0be36521d5d80a9a28f4194d32b1692e99afb9c2c3c32a3937a79c8a9ec3bb87b104fd19bc1fc56574551eec24c0c1d94d4bdb63db208712338f987e5fb904da0af1f698a361ad06781885be7dc71048fc137cc7ec6276306ff7a9f0e37cee05c4e74a8e9a0fc61ffb09737dbe613a1cdfd83bd48426be9db75067b1008226e2cb393da0129355095aeacceaa5fb67974f82294d88399c234b414e41586ac71229a214057ca147e1dd80fb2fac38d15fce07fced0896e116ab6226ac70f3109ac3a88c3df38f6279a565f2ffd90ee20d2ff04778ea7a818bc1b6134d121a7701724fe525e2f3dcfbf9d1f0dcd97034f8c7a71a3b91e95f3a63d8c97bdbf3f970156dffb767278af20af51efeec80117474b29a704a38aa5a76412000cbb31c9143446b5319bae841084c7ad03c3aa1455d42ed57842b0f9b1abb81a262d855969340916df435fb7108629d1e9a3d49a9c5a84003d05087b5961a5552be15e81d58ee80f068a00636585a139dd58ddcde568f5253ceb31a1b1248e4897e2ae459fd8d232d0c8ff688c90f509cc413e3ffc55a3764ab2a80ce67c012296a1337141df0a47daa86f957b769cff6ad26d8685c43fa0a14c678d7e1875ddd15df3c0bf463c81fc330c71f173dbc2900388f9d8df24781b0b7404318a938a6f7a2dc2e8e92d1224ac410fe36af338e27f57d2efb06cfba995ec5a0c23cdf8d2e889988294b58f9507faa5c758f25f612f85e70f6754ff0f4539b2198bcde603b5a5fe0adc51719f8584214657ef78b95e7cd3a1dbf9ea01102402171588d6c80f617b2cb521e533c4abacac46766df58381bce43a56ee8682297b44367a046d5a934c2838d7bead395e9418df1c63b47eb958bdaab50b898ed2ac717d0b2476f1621661d9557e1b70f15cfde15cad4a15268ff7e57edb0b1e2339f264c5226b411cdd9bdcb002f59922fdf9aa1cd38056b0fe69fbdc639201f234f99949118c4bedeb8ea912f382bd0382c032c7551a1ffeba2f9f30a41c062d563e5bbdf961c7c9cc49ee618601003457b09e5e0de3ae01a23f3c8e8356a3dd73d9c0214c31a79c011d832f94176c45aff9035090f7246e157887180ca4be90fcf3e1f6d7a902f20b73401187949a78b3e58d6e7fa01caaea98836237a7a53c52308c8b91728c9ada6acfe83d796b427511c37f11d66a65c15779e35a7db06faed5bb0c8d2c5444107074741d09e46aa004c02376b619fb84ef9c591ffd4209027dbfea4dd0070a8f7c2f4b5baa09da23e118e0e680b7fb571d6642fe4604656d6ebd0dfa6e7d89187ba87f929b8b606c8c1eec7f0f11049ad648684a93d84c74336678bf0acb8884112301e66e9b06828b8dda061871f";
    let reported_tower_height = 1;

    // return solution
    let proof = MinerState::create_proof_blob(challenge, difficulty, solution, reported_tower_height);
    MinerState::commit_state(sender, proof);

    let verified_tower_height_after = MinerState::get_miner_tower_height({{alice}});
    Debug::print(&verified_tower_height_after);

    // Transaction::assert(verified_tower_height_after == reported_tower_height, 10008001);


}
}
// check: EXECUTED
